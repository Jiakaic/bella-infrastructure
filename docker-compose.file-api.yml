name: bella-file-api
version: "3.8"

networks:
  bella-network:
    name: bella-infrastructure_bella-network
    external: true

services:
  # File API 后端服务
  bella-file-api:
    #    image: ${REGISTRY:-bellatop}/bella-file-api:latest
    build:
      context: ./bella-file-api
      dockerfile: api/Dockerfile
      args:
        - MAVEN_ARGS="-Dmaven.test.skip=true -U -Dmaven.build.cache.enabled=false"
    container_name: bella-file-api
    ports:
      # 仅暴露调试端口，HTTP通过共享nginx访问
      - "${FILE_API_DEBUGPORT:-9009}:9009"
    expose:
      - "8081"  # 内部端口供nginx访问，匹配实际运行端口
    environment:
      # 日志配置
      - LOG_PATH=${LOG_PATH:-/opt/bella-file-api/applogs}
      # 数据库配置 (连接外部已部署的数据库)
      - MYSQL_HOST=bella-mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=${FILE_API_MYSQL_DATABASE:-bella_file_api}
      - MYSQL_USER=${FILE_API_MYSQL_USER:-bella_file_api}
      - MYSQL_PASSWORD=${FILE_API_MYSQL_PASSWORD:-bella123}
      # Redis配置 (连接外部已部署的Redis)
      - REDIS_HOST=bella-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-bella123}
      - SPRING_REDIS_HOST=bella-redis
      - SPRING_REDIS_PORT=6379
      - SPRING_REDIS_PASSWORD=${REDIS_PASSWORD:-bella123}
      # S3配置 (MinIO)
      - S3_HOST=bella-minio
      - S3_API_PORT=9000
      - S3_ACCESS_KEY=${FILE_API_S3_ACCESS_KEY:-bella_admin}
      - S3_SECRET_KEY=${FILE_API_S3_SECRET_KEY:-bella123456}
      - S3_BUCKET=${FILE_API_S3_BUCKET:-bella-file-api}
      - S3_ROOT_PATH=${FILE_API_S3_ROOT_PATH:-files}
      # Spring配置 (关键修复)
      - SPRING_PROFILES_ACTIVE=docker,enterprise
      # 应用配置
      - BELLA_OPEN_API_BASE=${BELLA_OPENAPI_BASE:-https://openapi.example.com/v1/}
      - BELLA_STORAGE_TYPE=s3
      - BELLA_TMP_FILE_DIR=/opt/bella-file-api/cache
      - API_PORT=8081
      # 存储配置 (企业版格式)
      - BELLA_STORAGE_S3_BUCKET=${FILE_API_S3_BUCKET:-bella-file-api}
      - BELLA_FILE_API_STORAGE_S3_ENDPOINT=http://bella-minio:9000
      - BELLA_FILE_API_STORAGE_S3_AK=${FILE_API_S3_ACCESS_KEY:-bella_admin}
      - BELLA_FILE_API_STORAGE_S3_SK=${FILE_API_S3_SECRET_KEY:-bella123456}
      - BELLA_FILE_API_STORAGE_S3_REGION=us-east-1
      # Kafka配置 (连接外部已部署的Kafka)
      - kafka.enabled=true
      - KAFKA_BOOTSTRAP_SERVERS=bella-kafka:9092
      - KAFKA_PRODUCER_VALUE_SERIALIZER=org.springframework.kafka.support.serializer.JsonSerializer
      - KAFKA_PRODUCER_KEY_SERIALIZER=org.apache.kafka.common.serialization.StringSerializer
      - KAFKA_TOPIC_BROADCAST=bella_file_api
      # 环境变量 (企业版配置)
      - IDC=zeus
      - MODULE=bella-file-api
      - ENVTYPE=enterprise
      - DEBUGPORT=9009
      - JMXPORT=9010
      - MATRIX_CODE_DIR=/opt/bella-file-api/htdocs
      - MATRIX_APPLOGS_DIR=/opt/bella-file-api/applogs
      - MATRIX_ACCESSLOGS_DIR=/opt/bella-file-api/logs
      - MATRIX_LOGS_DIR=/opt/bella-file-api/logs
      - MATRIX_CACHE_DIR=/opt/bella-file-api/cache
      - MATRIX_PRIVDATA_DIR=/opt/bella-file-api/privdata
    volumes:
      # 挂载日志和配置目录
      - ./file-api/api/logs:/opt/bella-file-api/applogs
      - ./file-api/api/configuration:/opt/bella-file-api/configuration
      - ./file-api/api/cache:/opt/bella-file-api/cache
      - ./file-api/api/privdata:/opt/bella-file-api/privdata
    env_file:
      - .env.file-api
    networks:
      - bella-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # File API Web 前端服务
  bella-file-web:
    #    image: ${REGISTRY:-bellatop}/bella-file-web:latest
    build:
      context: ./bella-file-api
      dockerfile: web/Dockerfile
    container_name: bella-file-web
    expose:
      - "3000"  # 内部端口供nginx访问
    environment:
      - NEXT_PUBLIC_BELLA_FILE_API_URL=http://${API_HOST:-bella-file-api}:${API_PORT:-8081}
      - NEXT_PUBLIC_BELLA_OPENAPI_URL=${BELLA_OPENAPI_URL:-https://openapi.example.com}
      - NEXT_PUBLIC_ALLOWED_DEV_ORIGINS=${ALLOWED_DEV_ORIGINS:-}
      - PORT=3000
      - TZ=${TZ:-UTC}
    env_file:
      - .env.file-api
    networks:
      - bella-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s