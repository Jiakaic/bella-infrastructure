# Bella Services 共享 Nginx 配置
# 支持多域名路由: ${WORKFLOW_DOMAIN} 和 ${KNOWLEDGE_DOMAIN}

# 定义上游服务
upstream workflow_api {
    server bella-workflow-api:8080;
}

upstream workflow_web {
    server bella-workflow-web:3000;
}

upstream file_api {
    server bella-file-api:8081;
}

upstream file_web {
    server bella-file-web:3000;
}

# ==========================================
# HTTP 重定向到 HTTPS
# ==========================================
server {
    listen       80;
    server_name  ${WORKFLOW_DOMAIN:-workflow.example.com} ${KNOWLEDGE_DOMAIN:-knowledge.example.com};
    
    # 重定向到 HTTPS
    return 301 https://$server_name$request_uri;
}

# ==========================================
# Workflow 服务配置 (${WORKFLOW_DOMAIN}) - HTTPS
# ==========================================
server {
    listen       443 ssl http2;
    server_name  ${WORKFLOW_DOMAIN:-workflow.example.com};
    
    # SSL 证书配置
    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    
    # SSL 安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # 访问日志
    access_log  /var/log/nginx/workflow.access.log;
    error_log   /var/log/nginx/workflow.error.log;

    # 文件上传大小限制
    client_max_body_size 100M;

    # /api 路径转发到 workflow api 的 /v1
    location ^~ /api/ {
        proxy_pass http://workflow_api/v1/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_pass_request_headers on;
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    # /v1 路径直接转发到 workflow api
    location ^~ /v1/ {
        proxy_pass http://workflow_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_pass_request_headers on;
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    # /console 路径转发到 workflow api
    location ^~ /console/ {
        proxy_pass http://workflow_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_pass_request_headers on;
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    # 其他所有请求转发到 workflow web
    location / {
        proxy_pass http://workflow_web;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # 健康检查
    location /health {
        access_log off;
        return 200 "workflow healthy\n";
        add_header Content-Type text/plain;
    }
}

# ==========================================
# File API 服务配置 (${KNOWLEDGE_DOMAIN}) - HTTPS
# ==========================================
server {
    listen       443 ssl http2;
    server_name  ${KNOWLEDGE_DOMAIN:-knowledge.example.com};
    
    # SSL 证书配置
    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    
    # SSL 安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # 访问日志
    access_log  /var/log/nginx/knowledge.access.log;
    error_log   /var/log/nginx/knowledge.error.log;

    # 文件上传大小限制（文件服务需要更大的限制）
    client_max_body_size 1000M;


    # /v1 路径直接转发到 file api
    location ^~ /v1/ {
        proxy_pass http://file_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_pass_request_headers on;
        proxy_connect_timeout 60s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
        proxy_buffering off;
    }

    # /files 路径用于文件下载（直接访问API）
    location ^~ /files/ {
        proxy_pass http://file_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_pass_request_headers on;
        proxy_connect_timeout 60s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
        proxy_buffering off;
        
        # 文件下载优化
        proxy_cache off;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # 其他所有请求转发到 file web
    location / {
        proxy_pass http://file_web;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # 健康检查
    location /health {
        access_log off;
        return 200 "knowledge healthy\n";
        add_header Content-Type text/plain;
    }
}

# ==========================================
# 默认服务器配置（处理未匹配的域名）
# ==========================================
server {
    listen       80 default_server;
    server_name  _;

    # 返回404页面
    location / {
        return 404 '{"error": "Domain not found", "available_domains": ["${WORKFLOW_DOMAIN:-workflow.example.com}", "${KNOWLEDGE_DOMAIN:-knowledge.example.com}"]}';'
        add_header Content-Type application/json;
    }

    # 健康检查
    location /health {
        access_log off;
        return 200 "nginx healthy\n";
        add_header Content-Type text/plain;
    }
}